{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(boston.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(boston.data[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(boston.data[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = (X, y, random_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston data size: \\n{}\".format(boston.data.size))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n",
    "boston.data.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston data size: \\n{}\".format(boston.data.size))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=)\n",
    "    print(\"N-neghbor: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbor: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbor: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append = knn_reg.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append(knn_reg.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append(knn_reg.score(X_test, y_test))\n",
    "print(score_arrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append(knn_reg.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(neighbor_setting, score_arrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston data size: \\n{}\".format(boston.data.size))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append(knn_reg.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(neighbor_setting, score_arrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston data size: \\n{}\".format(boston.data.size))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = boston.data, boston.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)\n",
    "\n",
    "score_arrange = []\n",
    "neighbor_setting = range(1,12)\n",
    "for n_neighbor in neighbor_setting:\n",
    "    knn_reg = KNeighborsRegressor(n_neighbors=n_neighbor).fit(X_train, y_train)\n",
    "    print(\"N-neghbors: {}; Score: {:.2f}\".format(n_neighbor, knn_reg.score(X_test, y_test)))\n",
    "    score_arrange.append(knn_reg.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(neighbor_setting, score_arrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib\n",
    "mpl.get_backend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "print(\"Boston data: \\n{}\".format(boston.data[:4]))\n",
    "print(\"Boston data size: \\n{}\".format(boston.data.size))\n",
    "print(\"Boston target: \\n{}\".format(boston.target[:40]))\n",
    "print(\"Boston feature names: \\n{}\".format(boston.feature_names))\n",
    "# print(\"Decsription: \\n{}\".format(boston.DESCR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib\n",
    "import matplotlib as mpl\n",
    "mpl.get_backend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "import matplotlib.pyplot as plt"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
